<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# ai-service&#10; Microsserviço de IA&#10;" />
              <option name="updatedContent" value="#  FinBoost+ AI Service&#10;&#10;&lt;div align=&quot;left&quot;&gt;&#10;  &lt;img src=&quot;https://img.shields.io/badge/Status-Em_Desenvolvimento-yellow&quot; alt=&quot;Status&quot;&gt;&#10;  &lt;img src=&quot;https://img.shields.io/badge/Python-3.8+-blue&quot; alt=&quot;Python&quot;&gt;&#10;  &lt;img src=&quot;https://img.shields.io/badge/FastAPI-0.104+-green&quot; alt=&quot;FastAPI&quot;&gt;&#10;  &lt;img src=&quot;https://img.shields.io/badge/Licença-Educacional-blue&quot; alt=&quot;Licença&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;**Microsserviço de Inteligência Artificial** para o sistema FinBoost+. Oferece funcionalidades de análise financeira, classificação automática de gastos, OCR para comprovantes e assistente de voz.&#10;&#10;&gt;  **Componente do Projeto Final** - Desenvolvimento Full-Stack Jr – +Prati &amp; Codifica&#10;&#10;---&#10;&#10;##  **Funcionalidades Principais**&#10;&#10;### ✅ **Já Implementadas**&#10;&#10;-  **Análise de Gastos** - Sugestões inteligentes baseadas em padrões de consumo&#10;- ️ **Classificação Automática** - Categorização de despesas por palavras-chave&#10;-  **Previsão de Saldo** - Estimativa do saldo mensal baseada em tendências&#10;-  **API REST** - Endpoints para integração com o sistema principal&#10;&#10;###  **Em Desenvolvimento**&#10;&#10;-  **OCR para Comprovantes** - Extração automática de dados de notas fiscais&#10;-  **Assistente de Voz** - Cadastro de despesas por comando de voz&#10;- ⚠️ **Alertas Inteligentes** - Detecção de gastos atípicos&#10;&#10;---&#10;&#10;## ️ **Tecnologias**&#10;&#10;- **Python 3.8+** - Linguagem principal&#10;- **FastAPI** - Framework web moderno e rápido&#10;- **OpenCV** - Processamento de imagens (OCR)&#10;- **Tesseract** - Engine de reconhecimento de texto&#10;- **NumPy/SciPy** - Computação científica e análise estatística&#10;- **Pandas** - Manipulação e análise de dados&#10;&#10;---&#10;&#10;##  **Estrutura do Projeto**&#10;&#10;```&#10;ai-service/&#10;├──  app/&#10;│   ├──  models/           # Modelos de IA e análise&#10;│   │   ├── categorization.py    # Classificação automática&#10;│   │   ├── insights.py          # Análise de padrões&#10;│   │   ├── predictions.py       # Previsões financeiras&#10;│   │   └── ocr_processor.py     # Processamento OCR&#10;│   ├──  services/         # Lógica de negócio&#10;│   │   ├── analyses_service.py  # Serviços de análise&#10;│   │   ├── data_service.py      # Manipulação de dados&#10;│   │   └── voice_service.py     # Processamento de voz&#10;│   ├──  api/              # Endpoints da API&#10;│   │   ├── insight_router.py    # Rotas de insights&#10;│   │   ├── ocr_router.py        # Rotas de OCR&#10;│   │   └── voice_router.py      # Rotas de voz&#10;│   ├──  static/           # Arquivos estáticos&#10;│   │   └── js/&#10;│   │       └── voice_assistant.js&#10;│   └── ️ utils/            # Utilitários&#10;│       ├── image_processing.py  # Processamento de imagem&#10;│       └── text_processing.py   # Processamento de texto&#10;├──  requirements.txt      # Dependências Python&#10;├──  Dockerfile          # Container Docker&#10;└──  main.py             # Ponto de entrada da aplicação&#10;```&#10;&#10;---&#10;&#10;##  **Como Executar**&#10;&#10;###  **Pré-requisitos**&#10;- Python 3.8+&#10;- pip ou conda&#10;&#10;### ⚡ **Instalação e Execução**&#10;&#10;```bash&#10;# 1. Clone o repositório&#10;git clone https://github.com/Finboostplus/ai-service.git&#10;cd ai-service&#10;&#10;# 2. Instale as dependências&#10;pip install -r requirements.txt&#10;&#10;# 3. Execute o serviço&#10;python main.py&#10;```&#10;&#10;###  **Execução com Docker**&#10;&#10;```bash&#10;# Construir a imagem&#10;docker build -t finboost-ai .&#10;&#10;# Executar o container&#10;docker run -p 8000:8000 finboost-ai&#10;```&#10;&#10;**Acesse a API:** `http://localhost:8000`&#10;**Documentação:** `http://localhost:8000/docs`&#10;&#10;---&#10;&#10;##  **Endpoints da API**&#10;&#10;###  **Análise de Insights**&#10;```http&#10;POST /api/insights/analyze-expenses&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;user_id&quot;: 123,&#10;  &quot;period_days&quot;: 30&#10;}&#10;```&#10;&#10;### ️ **Classificação Automática**&#10;```http&#10;POST /api/categorization/classify&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;description&quot;: &quot;Uber para o trabalho&quot;&#10;}&#10;```&#10;&#10;###  **Previsão de Saldo**&#10;```http&#10;POST /api/predictions/monthly-balance&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;group_id&quot;: 456&#10;}&#10;```&#10;&#10;###  **OCR de Comprovantes** *(Em desenvolvimento)*&#10;```http&#10;POST /api/ocr/extract-data&#10;Content-Type: multipart/form-data&#10;&#10;file: [arquivo_de_imagem]&#10;```&#10;&#10;---&#10;&#10;##  **Exemplos de Uso**&#10;&#10;###  **Análise de Gastos**&#10;```python&#10;# Retorna sugestões como:&#10;{&#10;  &quot;suggestions&quot;: [&#10;    &quot;Você gastou 45% com alimentação&quot;,&#10;    &quot;Considere reduzir gastos com delivery&quot;&#10;  ]&#10;}&#10;```&#10;&#10;### ️ **Classificação Automática**&#10;```python&#10;# Input: &quot;Pagamento Uber&quot;&#10;# Output: &quot;transporte&quot;&#10;&#10;# Input: &quot;Pizza delivery&quot;&#10;# Output: &quot;alimentacao&quot;&#10;```&#10;&#10;###  **Previsão de Saldo**&#10;```python&#10;{&#10;  &quot;saldo_previsto&quot;: 1250.00,&#10;  &quot;confianca&quot;: &quot;alta&quot;,&#10;  &quot;dias_analisados&quot;: 15,&#10;  &quot;projecao_dias&quot;: 16&#10;}&#10;```&#10;&#10;---&#10;&#10;##  **Configuração Avançada**&#10;&#10;###  **Categorias Personalizadas**&#10;```python&#10;# app/models/categorization.py&#10;CATEGORY_KEYWORDS = {&#10;    &quot;alimentacao&quot;: [&quot;restaurante&quot;, &quot;ifood&quot;, &quot;pizza&quot;],&#10;    &quot;transporte&quot;: [&quot;uber&quot;, &quot;gasolina&quot;, &quot;metro&quot;],&#10;    &quot;entretenimento&quot;: [&quot;cinema&quot;, &quot;netflix&quot;, &quot;spotify&quot;],&#10;    # Adicione suas próprias categorias&#10;}&#10;```&#10;&#10;### ⚙️ **Thresholds de Análise**&#10;```python&#10;# app/models/insights.py&#10;EXPENSE_THRESHOLD = 40  # Percentual para alertas&#10;CONFIDENCE_LEVEL = 0.85  # Nível de confiança mínimo&#10;```&#10;&#10;---&#10;&#10;##  **Testes**&#10;&#10;```bash&#10;# Executar testes unitários&#10;python -m pytest tests/&#10;&#10;# Testes com cobertura&#10;python -m pytest --cov=app tests/&#10;&#10;# Teste manual da API&#10;curl -X POST &quot;http://localhost:8000/api/categorization/classify&quot; \&#10;     -H &quot;Content-Type: application/json&quot; \&#10;     -d '{&quot;description&quot;: &quot;Lanche no McDonald&quot;}'&#10;```&#10;&#10;---&#10;&#10;##  **Deploy e Integração**&#10;&#10;###  **Docker Compose** *(Para desenvolvimento)*&#10;```yaml&#10;version: '3.8'&#10;services:&#10;  ai-service:&#10;    build: .&#10;    ports:&#10;      - &quot;8000:8000&quot;&#10;    environment:&#10;      - ENV=development&#10;```&#10;&#10;###  **Integração com Backend Principal**&#10;```java&#10;// Spring Boot - Exemplo de integração&#10;@Service&#10;public class AIService {&#10;    &#10;    @Value(&quot;${ai.service.url}&quot;)&#10;    private String aiServiceUrl;&#10;    &#10;    public List&lt;String&gt; getExpenseInsights(Long userId) {&#10;        String url = aiServiceUrl + &quot;/api/insights/analyze-expenses&quot;;&#10;        // Fazer chamada HTTP para o microsserviço&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;##  **Roadmap**&#10;&#10;### **Fase 1 - MVP** ✅&#10;- [x] Análise básica de gastos&#10;- [x] Classificação por palavras-chave  &#10;- [x] Previsões simples de saldo&#10;- [x] API REST funcional&#10;&#10;### **Fase 2 - Diferenciais** &#10;- [ ] OCR para comprovantes fiscais&#10;- [ ] Assistente de voz para cadastro&#10;- [ ] Alertas de gastos atípicos&#10;- [ ] Cache e otimizações&#10;&#10;### **Fase 3 - Avançado** &#10;- [ ] Machine Learning personalizado&#10;- [ ] Análises preditivas avançadas&#10;- [ ] Dashboard de insights&#10;- [ ] Integração com bancos (Open Banking)&#10;&#10;---&#10;&#10;##  **Contribuindo**&#10;&#10;1. Fork o projeto&#10;2. Crie uma branch: `git checkout -b feature/nova-funcionalidade`&#10;3. Commit: `git commit -m 'feat: adiciona análise de padrões'`&#10;4. Push: `git push origin feature/nova-funcionalidade`&#10;5. Abra um Pull Request&#10;&#10;###  **Padrões de Código**&#10;- Nomes de variáveis/funções em **inglês**&#10;- Comentários e documentação em **português**&#10;- Mensagens para usuário em **português**&#10;- Seguir **PEP 8** para Python&#10;&#10;---&#10;&#10;##  **Performance e Limitações**&#10;&#10;### ⚡ **Performance**&#10;- Tempo de resposta médio: &lt; 100ms&#10;- Suporte a 1000+ requisições/minuto&#10;- Classificação instantânea de despesas&#10;&#10;### ⚠️ **Limitações Atuais**&#10;- OCR funciona melhor com imagens de alta qualidade&#10;- Assistente de voz requer conexão com internet&#10;- Análises requerem mínimo de 10 transações&#10;&#10;---&#10;&#10;##  **Suporte e Documentação**&#10;&#10;-  **Issues:** [GitHub Issues](https://github.com/Finboostplus/ai-service/issues)&#10;-  **Documentação Completa:** [Swagger UI](http://localhost:8000/docs)&#10;-  **Discussões:** [GitHub Discussions](https://github.com/Finboostplus/ai-service/discussions)&#10;&#10;---&#10;&#10;##  **Licença**&#10;&#10;Este projeto faz parte do **FinBoost+** e está licenciado para **uso educacional** no curso **Desenvolvimento Full-Stack Jr – +Prati &amp; Codifica**.&#10;&#10;---&#10;&#10;##  **Equipe**&#10;&#10;Desenvolvido como parte do projeto **FinBoost+** pelo **Grupo 7 da Turma 2**.&#10;&#10;**Principais responsáveis pela IA:**&#10;- Backend: Bruno, Cristiano, Eduardo, João, Pedro, Alisson, Túlio&#10;- Integração: Alan (Gestão)&#10;&#10;---&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;  &lt;strong&gt; Inteligência Artificial para Finanças Pessoais&lt;/strong&gt;&lt;br/&gt;&#10;  &lt;em&gt;Parte do ecossistema FinBoost+ • +Prati &amp; Codifica - 2025&lt;/em&gt;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/models/categorization.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models/categorization.py" />
              <option name="originalContent" value="CATEGORIES_KEYWORDS = {&#10;    &quot;alimentacao&quot;: [&quot;restaurante&quot;, &quot;lanche&quot;, &quot;pizza&quot;, &quot;delivery&quot;, &quot;ifood&quot;, &quot;burger&quot;, &quot;açai&quot;],&#10;    &quot;transporte&quot;: [&quot;uber&quot;, &quot;gasolina&quot;, &quot;estacionamento&quot;, &quot;onibus&quot;, &quot;metro&quot;, &quot;taxi&quot;],&#10;    &quot;entretenimento&quot;: [&quot;cinema&quot;, &quot;show&quot;, &quot;netflix&quot;, &quot;spotify&quot;, &quot;jogo&quot;, &quot;teatro&quot;],&#10;    &quot;compras&quot;: [&quot;loja&quot;, &quot;shopping&quot;, &quot;mercado&quot;, &quot;supermercado&quot;, &quot;farmacia&quot;],&#10;    &quot;casa&quot;: [&quot;luz&quot;, &quot;agua&quot;, &quot;gas&quot;, &quot;aluguel&quot;, &quot;condominio&quot;, &quot;internet&quot;]&#10;}&#10;&#10;def classificar_despesa(descricao):&#10;    descricao_lower = descricao.lower()&#10;    for categoria, keywords in CATEGORIES_KEYWORDS.items():&#10;        if any(keyword in descricao_lower for keyword in keywords):&#10;            return categoria&#10;    return &quot;outros&quot;" />
              <option name="updatedContent" value="# Dicionário de palavras-chave para categorização automática de despesas&#13;&#10;CATEGORY_KEYWORDS = {&#13;&#10;    &quot;alimentacao&quot;: [&quot;restaurante&quot;, &quot;lanche&quot;, &quot;pizza&quot;, &quot;delivery&quot;, &quot;ifood&quot;, &quot;burger&quot;, &quot;açai&quot;],&#13;&#10;    &quot;transporte&quot;: [&quot;uber&quot;, &quot;gasolina&quot;, &quot;estacionamento&quot;, &quot;onibus&quot;, &quot;metro&quot;, &quot;taxi&quot;],&#13;&#10;    &quot;entretenimento&quot;: [&quot;cinema&quot;, &quot;show&quot;, &quot;netflix&quot;, &quot;spotify&quot;, &quot;jogo&quot;, &quot;teatro&quot;],&#13;&#10;    &quot;compras&quot;: [&quot;loja&quot;, &quot;shopping&quot;, &quot;mercado&quot;, &quot;supermercado&quot;, &quot;farmacia&quot;],&#13;&#10;    &quot;casa&quot;: [&quot;luz&quot;, &quot;agua&quot;, &quot;gas&quot;, &quot;aluguel&quot;, &quot;condominio&quot;, &quot;internet&quot;]&#13;&#10;}&#13;&#10;&#13;&#10;def classify_expense(description):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Classifica uma despesa baseada na descrição fornecida.&#13;&#10;    &#13;&#10;    Args:&#13;&#10;        description: Descrição da despesa a ser classificada&#13;&#10;        &#13;&#10;    Returns:&#13;&#10;        Categoria da despesa ou &quot;outros&quot; se não encontrar correspondência&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    description_lower = description.lower()&#13;&#10;    for category, keywords in CATEGORY_KEYWORDS.items():&#13;&#10;        if any(keyword in description_lower for keyword in keywords):&#13;&#10;            return category&#13;&#10;    return &quot;outros&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/models/insights.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models/insights.py" />
              <option name="originalContent" value="# Lógica simples em Python/FastAPI&#10;def analisar_gastos_categoria(user_id, periodo_dias=30):&#10;    gastos_por_categoria = query_gastos_por_categoria(user_id, periodo_dias)&#10;    total = sum(gastos_por_categoria.values())&#10;&#10;    sugestoes = []&#10;    for categoria, valor in gastos_por_categoria.items():&#10;        percentual = (valor / total) * 100&#10;        if percentual &gt; 40:  # Threshold configurável&#10;            sugestoes.append(f&quot;Você gastou {percentual:.0f}% com {categoria}&quot;)&#10;&#10;    return sugestoes&#10;" />
              <option name="updatedContent" value="# Lógica para análise de insights financeiros em Python/FastAPI&#10;def analyze_category_expenses(user_id, period_days=30):&#10;    &quot;&quot;&quot;&#10;    Analisa os gastos por categoria do usuário e retorna sugestões.&#10;    &#10;    Args:&#10;        user_id: ID do usuário&#10;        period_days: Período em dias para análise (padrão: 30 dias)&#10;    &#10;    Returns:&#10;        Lista de sugestões baseadas nos gastos por categoria&#10;    &quot;&quot;&quot;&#10;    expenses_by_category = query_gastos_por_categoria(user_id, period_days)&#10;    total = sum(expenses_by_category.values())&#10;&#10;    suggestions = []&#10;    for category, amount in expenses_by_category.items():&#10;        percentage = (amount / total) * 100&#10;        if percentage &gt; 40:  # Threshold configurável&#10;            suggestions.append(f&quot;Você gastou {percentage:.0f}% com {category}&quot;)&#10;&#10;    return suggestions" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/models/predictions.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models/predictions.py" />
              <option name="originalContent" value="def prever_saldo_mensal(grupo_id):&#10;    gastos_ultimos_15_dias = query_gastos_recentes(grupo_id, 15)&#10;    media_diaria = sum(gastos_ultimos_15_dias) / 15&#10;&#10;    dias_restantes = dias_ate_fim_do_mes()&#10;    projecao_gastos = media_diaria * dias_restantes&#10;&#10;    saldo_atual = calcular_saldo_grupo(grupo_id)&#10;    saldo_previsto = saldo_atual - projecao_gastos&#10;&#10;    return {&#10;        &quot;saldo_previsto&quot;: saldo_previsto,&#10;        &quot;confianca&quot;: calcular_confianca(gastos_ultimos_15_dias)&#10;    }" />
              <option name="updatedContent" value="def predict_monthly_balance(group_id):&#10;    &quot;&quot;&quot;&#10;    Prevê o saldo mensal baseado nos gastos dos últimos 15 dias.&#10;    &#10;    Args:&#10;        group_id: ID do grupo para análise&#10;        &#10;    Returns:&#10;        Dicionário com saldo previsto e nível de confiança da previsão&#10;    &quot;&quot;&quot;&#10;    recent_expenses_15_days = query_gastos_recentes(group_id, 15)&#10;    daily_average = sum(recent_expenses_15_days) / 15&#10;&#10;    remaining_days = dias_ate_fim_do_mes()&#10;    projected_expenses = daily_average * remaining_days&#10;&#10;    current_balance = calcular_saldo_grupo(group_id)&#10;    predicted_balance = current_balance - projected_expenses&#10;&#10;    return {&#10;        &quot;saldo_previsto&quot;: predicted_balance,&#10;        &quot;confianca&quot;: calcular_confianca(recent_expenses_15_days)&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>